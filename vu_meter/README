VU Meter
========

This is a simple VU meter implementation started at the first Eigenharp DevCon, January 23rd, 2012 by John S. Nolan and Stefan Bohne.
Simple idea: take an audio signal in and display a VU meter style light bar using the LEDs on the Eigenharp keys. Light bar output is logarithmic

Inputs
- audio signal (or and bounded float (-1,1) signal)

Outputs
- light out (suitable for plumbing into keyboard 'light input' s)


Parameters
- size : the number of keys to be used to display the VU meter
- thresholds (all in dB)
  - signal threshold (signal present level/green)
  - high threshold (signal high level/orange)
  - clip threshold (signal clip level/red)
- clip hold : number of seconds to hold the red light if the signal clips
  
USAGE
Wire an audio input to the 'audio input'
Create a dedicated kgroup (use for mapping the display geometry)
Hook the keyboard 'controller output' to the kgroup 'controller input' (won't work if you miss this)
In the kgroup edit the parameters and set 'course size' and 'key map' for the display you want (e.g. course size=[[1,0.0]] , key map = [[1,1],[2,2],[3,3],[4,4],[5,5]])
Hook the 'light output' of the vu_meter to the 'light_input' of the kgroup 'kgroup output' (might need to create one under 'output')
Hook the 'light output' of the kgroup to the 'light input' of the keyboard

BUG: currently the kgroup does not remap the status lights properly so you will only get a bar in the first row of the kgroup. You can of
     course place the kgroup where you like but it will always be a single bar (no fancy layout yet)

DEV COMMENTARY
This was a learning exercise to use the recently re-organised 2.0.35-experimental interfaces. May not be the best or most stylistic code to copy!

Using a kgroup for the geometry seems over-blown. Could do with a simple Mapper agent for LEDs that just does display mapping.

Had to swap to use standard C math for dB conversion as the pic::approx::pow function relies on a limited exp approximation (-1,1 limited)

Swapped to use a flipflop passing a collection of segment_data_t values. Nicer, cleaner pattern. 

Got rid of laots of set_X methods in Python/Native interface and went to a single set_parameter style


